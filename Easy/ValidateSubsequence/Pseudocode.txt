Sample input:
arr = [5, 1, 22, 25, 6, -1, 8, 10]
seq = [1, 6, -1, 10]

Sample output:
true

arr = [5, 1, 22, 25, 6, -1, 8, 10]

seq = [1, 6, -1, 10]

current_idx = 7

if sorted(indexes) == indexes
    return True

O(N) time | O(1) space

Solution before code:
    1. Initialize a current_idx variable with the index of the first number
    of the sequence inside the array.
    2. Loop through the sequence starting from the second number.
    3. In each iteration compare the index of the sequence number inside
       the array with the current_idx variable.
    4. If the sequence number index in the array is greater than the current_idx
       variable, keep looping, otherwise return false.
    5. If the loop runs through the entire sequence successfully, then the
       sequence is a subsequence of the array.

Solution after code:

- Edge cases:
    1. Check if the length of the sequence is greater than the length
       of the array, if true, return False.
    2. Check if the first number of the sequence is in the array, if not,
       return false.
    3. Check if all elements of the sequence are equals to the elements of the
       array, if true, return true.
- Steps:
    1. Initialize a current_idx variable with 0 as the value.
    2. Loop through the sequence starting from the second number.
    3. In each iteration compare the index of the sequence number inside
       the array with the current_idx variable.
    4. If the sequence number index in the array is greater than the current_idx
       variable, update the current_idx variable with the sequence number
       index in the array.
    5. If the sequence number index in the array is less than the current_idx
       variable, reuturn false.

    Finally, if the loop runs through the entire sequence successfully,
    then the sequence is a subsequence of the array.